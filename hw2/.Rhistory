#require pakage expm
#require pakage expm
require(expm)
#fix round
round2 = function(x, n) {
posneg = sign(x)
z = abs(x)*10^n
z = z + 0.5
z = trunc(z)
z = z/10^n
z*posneg
}
# read PAM1 from data, get header and skip first line
pam1 <- read.table("pam1.txt", header = T, skip = 1)
# construct PAM250 from PAM1
pam1_matrix <- t(matrix(unlist(pam1), ncol = 20, byrow = TRUE))
# read PAM1 from data, get header and skip first line
pam1 <- read.table("pam1.txt", header = T, skip = 1)
q()
Rscript
Rscript pro2_ref.R
source("https://bioconductor.org/biocLite.R")
biocLite("Biostrings")
library(Biostrings)
i_f = "test.fasta"
s_f = "PAM250.txt"
file_fasta <- readBStringSet(i_f)
seq_name <- names(file_fasta)
sequence <- paste(file_fasta)
#read score file, convert to matrix and give it row and col names 
score_schem <- read.table(s_f, header = T, skip = 9)
score_schem_matrix <- t(matrix(unlist(score_schem), ncol = 24, byrow = TRUE))
rownames(score_schem_matrix) <- rownames(score_schem)
colnames(score_schem_matrix) <- rownames(score_schem)
#convert seq to list and add * on first
s1_list <- strsplit(paste("*", sequence[1], sep=""), "")[[1]]
s2_list <- strsplit(paste("*", sequence[2], sep=""), "")[[1]]
#create matrix to compute score
align_matrix <- matrix(0, nrow = length(s1_list), ncol = length(s2_list))
for(i in 1:length(s1_list))
{
for(j in 1:length(s2_list))
{
if(i == 1 || j == 1)
{
align_matrix[i,j] <- score_schem_matrix[s1_list[i],s2_list[j]]
}
else
{
match_var <- align_matrix[i - 1, j - 1]
left_var <- align_matrix[i, j - 1]
up_var <- align_matrix[i - 1, j]
align_matrix[i,j] <- score_schem_matrix[s1_list[i], s2_list[j]] + max(match_var, max(left_var, up_var))
}
}
}
#trace-back
pattern <- ""
subject <- ""
count_pattern <- length(s1_list)
count_subject <- length(s2_list)
while(!((count_pattern == 1) && (count_subject == 1)))
{
if(count_pattern == 1)
{
pattern <- paste(pattern, "-", sep="" )
subject <- paste(subject, s2_list[count_subject], sep="" )
count_subject <- count_subject - 1
}
else if(count_subject == 1)
{
pattern <- paste(pattern, s1_list[count_pattern], sep="" )
subject <- paste(subject, "-", sep="" )
count_pattern <- count_pattern - 1
}
else
{
mat = align_matrix[count_pattern - 1, count_subject - 1]
left = align_matrix[count_pattern, count_subject - 1]
top = align_matrix[count_pattern - 1, count_subject]
choose_path = max(mat, max(left, top))
if(choose_path == mat)
{
pattern <- paste(pattern, s1_list[count_pattern], sep="" )
subject <- paste(subject, s2_list[count_subject], sep="" )
count_pattern <- count_pattern - 1
count_subject <- count_subject - 1
}
else if(choose_path == left)
{
pattern <- paste(pattern, "-", sep="" )
subject <- paste(subject, s2_list[count_subject], sep="" )
count_subject <- count_subject - 1
}
else
{
pattern <- paste(pattern, s1_list[count_pattern], sep="" )
subject <- paste(subject, "-", sep="" )
count_pattern <- count_pattern - 1
}
}
}
pattern <- reverse(pattern)
subject <- reverse(subject)
pattern
subject
#trace-back
pattern <- ""
subject <- ""
count_pattern <- length(s1_list)
count_subject <- length(s2_list)
while(!((count_pattern == 1) && (count_subject == 1)))
{
if(count_pattern == 1)
{
pattern <- paste(pattern, "-", sep="" )
subject <- paste(subject, s2_list[count_subject], sep="" )
count_subject <- count_subject - 1
}
else if(count_subject == 1)
{
pattern <- paste(pattern, s1_list[count_pattern], sep="" )
subject <- paste(subject, "-", sep="" )
count_pattern <- count_pattern - 1
}
else
{
if(s1_list[count_pattern] == s2_list[count_subject])
{
pattern <- paste(pattern, s1_list[count_pattern], sep="" )
subject <- paste(subject, s2_list[count_subject], sep="" )
count_pattern <- count_pattern - 1
count_subject <- count_subject - 1
}
else
{
mat = align_matrix[count_pattern - 1, count_subject - 1]
left = align_matrix[count_pattern, count_subject - 1]
top = align_matrix[count_pattern - 1, count_subject]
choose_path = max(mat, max(left, top))
if(choose_path == mat)
{
pattern <- paste(pattern, s1_list[count_pattern], sep="" )
subject <- paste(subject, s2_list[count_subject], sep="" )
count_pattern <- count_pattern - 1
count_subject <- count_subject - 1
}
else if(choose_path == left)
{
pattern <- paste(pattern, "-", sep="" )
subject <- paste(subject, s2_list[count_subject], sep="" )
count_subject <- count_subject - 1
}
else
{
pattern <- paste(pattern, s1_list[count_pattern], sep="" )
subject <- paste(subject, "-", sep="" )
count_pattern <- count_pattern - 1
}
}
}
}
pattern <- reverse(pattern)
subject <- reverse(subject)
pattern
subject
align_ma
align_matrix
q()
