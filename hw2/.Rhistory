#require pakage expm
#require pakage expm
require(expm)
#fix round
round2 = function(x, n) {
posneg = sign(x)
z = abs(x)*10^n
z = z + 0.5
z = trunc(z)
z = z/10^n
z*posneg
}
# read PAM1 from data, get header and skip first line
pam1 <- read.table("pam1.txt", header = T, skip = 1)
# construct PAM250 from PAM1
pam1_matrix <- t(matrix(unlist(pam1), ncol = 20, byrow = TRUE))
# read PAM1 from data, get header and skip first line
pam1 <- read.table("pam1.txt", header = T, skip = 1)
q()
Rscript
Rscript pro2_ref.R
setwd("~/")
setwd("C:/Users/USER/Desktop/Bio R/hw2")
Rscript pro_ref.R
setwd("C:/Users/USER/Desktop/Bio R/hw1")
Rscript hw1_105753006.R
require(expm)
#fix round
round2 = function(x, n) {
posneg = sign(x)
z = abs(x)*10^n
z = z + 0.5
z = trunc(z)
z = z/10^n
z*posneg
}
# read PAM1 from data, get header and skip first line
pam1 <- read.table("pam1.txt", header = T, skip = 1)
# construct PAM250 from PAM1
pam1_matrix <- t(matrix(unlist(pam1), ncol = 20, byrow = TRUE))
pam1_config <- pam1_matrix / 10000
pam250_noScale <- pam1_config %^% 250 * 100
for(x in c(1:20))
{
sum_temp <- sum(pam250_noScale[,x])
for(y in c(1:20))
{
pam250_noScale[y,x] <- pam250_noScale[y,x] / sum_temp * 100
}
}
pam250 <- round2(pam250_noScale, 0)
# output PAM250 as a file
rownames(pam250) <- rownames(pam1)
colnames(pam250) <- rownames(pam1)
write.table(pam250, "pam250.txt", row.names = TRUE, col.names = NA, quote = FALSE, sep = '\t')
######################################
# the reference code of program2
######################################
######################################
# initial
######################################
# read parameters
args = commandArgs(trailingOnly=TRUE)
if (length(args)==0) {
stop("USAGE: Rscript pro2_<your student ID>.R --input test.fasta --score pam250.txt --aln global --gap_open -10 --gap_extend -2 --output result.fasta", call.=FALSE)
}
# parse parameters
i<-1
while(i < length(args))
{
if(args[i] == "--input"){
i_f<-args[i+1]
i<-i+1
}else if(args[i] == "--score"){
s_f<-args[i+1]
i<-i+1
}else if(args[i] == "--aln"){
aln_mode <- args[i+1]
i<-i+1
}else if(args[i] == "--gap_open"){
g_o<-args[i+1]
i<-i+1
}else if(args[i] == "--gap_extend"){
g_e<-args[i+1]
i<-i+1
}else if(args[i] == "--output"){
o_f<-args[i+1]
i<-i+1
}else{
stop(paste("Unknown flag", args[i]), call.=FALSE)
}
i<-i+1
}
print("PARAMETERS")
print(paste("input file         :", i_f))
print(paste("output file        :", o_f))
print(paste("score file         :", s_f))
print(paste("gap open penalty   :", g_o))
print(paste("gap extend penalty :", g_e))
######################################
# main
######################################
# your code
source('C:/Users/USER/Desktop/Bio R/hw2/pro2_ref.R', echo=TRUE)
source('C:/Users/USER/Desktop/Bio R/hw2/pro2_ref.R --input test.fasta', echo=TRUE)
Rscript
?Rscript
?Rscript pro2_ref.r
?Rscript "pro2_ref.r"
?Rscript pro2_ref.R
Rscript --help
?Rscript --help
Rscript pro2_ref.R
setwd("C:/Users/USER/Desktop/Bio R/hw2")
Rscript pro2_ref.R
pro2_ref.R
pro2_ref
source("pro2_ref.R")
source("pro2_ref.R",--input)
source("pro2_ref.R","--input")
source("pro2_ref.R","--inpt")
source("pro2_ref.R --input")
Rscript.exe
./Rscript.exe
Rscript.exe
